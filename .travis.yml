language: rust
sudo: required
dist: trusty
services: docker
addons:
    apt:
        packages:
            - libssl-dev
cache: cargo

matrix:
  include:
    - name: "Code coverage"
      rust:  nightly
      install:
        - RUSTFLAGS="--cfg procmacro2_semver_exempt" cargo install --force cargo-tarpaulin
      script:
        - cargo tarpaulin -t 120 --out Xml -- --test-threads=1
        - bash <(curl -s https://codecov.io/bash)
    - name: "[RELEASE + DEBUG]: Tests w. sanitizers"
      rust: nightly
      script:
        - cargo clean
        # Debug:
        # Sanitizers with default features
        - RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --tests --target x86_64-unknown-linux-gnu
        - RUSTFLAGS="-Z sanitizer=leak" cargo test --tests --target x86_64-unknown-linux-gnu
        # No default features
        - RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --no-default-features --tests --target x86_64-unknown-linux-gnu
        - RUSTFLAGS="-Z sanitizer=leak" cargo test --no-default-features --tests --target x86_64-unknown-linux-gnu
        
        # Release:
        # Sanitizers with default features
        - RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --tests --release --target x86_64-unknown-linux-gnu
        - RUSTFLAGS="-Z sanitizer=leak" cargo test --tests --release --target x86_64-unknown-linux-gnu
        # No default features
        - RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --no-default-features --tests --release --target x86_64-unknown-linux-gnu
        - RUSTFLAGS="-Z sanitizer=leak" cargo test --no-default-features --tests --release --target x86_64-unknown-linux-gnu

        - cargo clean

    - name: "[RELEASE + DEBUG (stable)]: Build no_std"
      env: TARGET=thumbv7em-none-eabi
      rust: stable
      install:
        - cargo install xargo || true
        - rustup target add $TARGET
        - rustup component add rust-src
      script:
        # Debug:
        - xargo build --no-default-features --verbose --target $TARGET
          
        # Release:
        - xargo build --release --no-default-features --verbose --target $TARGET

    - name: "[RELEASE + DEBUG (nightly)]: Build no_std"
      env: TARGET=thumbv7em-none-eabi
      rust: nightly
      install:
        - cargo install xargo || true
        - rustup target add $TARGET
        - rustup component add rust-src
      script:
        # Debug:
        - xargo build --no-default-features --verbose --target $TARGET
          
        # Release:
        - xargo build --release --no-default-features --verbose --target $TARGET
    
    - name: "[RELEASE + DEBUG]: 32-bit architecture"
      env: TARGET=i686-unknown-linux-gnu
      rust: stable
      script:
        # Debug:
        - cross test --target $TARGET
        - cross test --no-default-features --tests --target $TARGET
        
        # Release:
        - cross test --release --target $TARGET
        - cross test --release --no-default-features --tests --target $TARGET
    
    - name: "[RELEASE + DEBUG]: OSX"
      env: TARGET=x86_64-apple-darwin
      os: osx
      rust: stable
      script:
        # Debug:
        - cross test --target $TARGET
        - cross test --no-default-features --tests --target $TARGET
        
        # Release:
        - cross test --release --target $TARGET
        - cross test --release --no-default-features --tests --target $TARGET
    
    - name: "[RELEASE + DEBUG]: Big-endian"
      env: TARGET=mips64-unknown-linux-gnuabi64
      rust: stable
      script:
        # Debug:
        - cross test --target $TARGET
        - cross test --no-default-features --tests --target $TARGET
        
        # Release:
        - cross test --release --target $TARGET
        - cross test --release --no-default-features --tests --target $TARGET
    
    - name: "[RELEASE (stable)]: WebAssembly"
      env: TARGET=wasm32-unknown-unknown
      rust: stable
      install:
        - rustup target add wasm32-unknown-unknown
      script:
        # Release:
        - cargo check --no-default-features --target wasm32-unknown-unknown

    - name: "[RELEASE (nightly)]: WebAssembly"
      env: TARGET=wasm32-unknown-unknown
      rust: nightly
      install:
        - rustup target add wasm32-unknown-unknown
      script:
        # Release:
        - cargo check --no-default-features --target wasm32-unknown-unknown
    
    - name: "Documentation"
      rust: stable
      script:
        - cargo doc --no-deps
    
    - name: "Minimum Supported Rust Version"
      rust: 1.37.0
      script:
        - cargo test
        - cargo test --no-default-features --tests

install:
  - cargo install cross || true
