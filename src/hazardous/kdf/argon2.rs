// MIT License

// Copyright (c) 2018-2020 The orion Developers

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//! # Parameters:
//! - `PLACEHOLDER`: PLACEHOLDER.
//!
//! # Errors:
//! An error will be returned if:
//! - PLACEHOLDER
//!
//! # Panics:
//! A panic will occur if:
//! - PLACEHOLDER
//!
//! # Security:
//! - PLACEHOLDER
//!
//! # Example:
//! ```rust
//!
//! ```

use crate::hazardous::hash::blake2b::{Blake2b, BLAKE2B_OUTSIZE};

/// The Argon2 version.
pub const ARGON2_VERSION: u32 = 0x13;

/// The Argon2 variant (i).
pub const ARGON2_VARIANT: u32 = 1;

#[must_use]
#[inline(always)]
///
const fn lower_mult_add(x: u64, y: u64) -> u64 {
	let mask = 0xFFFF_FFFFu64;
	let x_l = x & mask;
	let y_l = y & mask;
	let xy = x_l.wrapping_mul(y_l);
	x.wrapping_add(y.wrapping_add(xy.wrapping_add(xy)))
}

///
fn g(a: &mut u64, b: &mut u64, c: &mut u64, d: &mut u64) {
	*a = lower_mult_add(*a, *b);
	*d = (*d ^ *a).rotate_right(32);
	*c = lower_mult_add(*c, *d);
	*b = (*b ^ *c).rotate_right(24);
	*a = lower_mult_add(*a, *b);
	*d = (*d ^ *a).rotate_right(16);
	*c = lower_mult_add(*c, *d);
	*b = (*b ^ *c).rotate_right(63);
}

///
fn permutation_p(
	v0: &mut u64,
	v1: &mut u64,
	v2: &mut u64,
	v3: &mut u64,
	v4: &mut u64,
	v5: &mut u64,
	v6: &mut u64,
	v7: &mut u64,
	v8: &mut u64,
	v9: &mut u64,
	v10: &mut u64,
	v11: &mut u64,
	v12: &mut u64,
	v13: &mut u64,
	v14: &mut u64,
	v15: &mut u64,
) {
	g(v0, v4, v8, v12);
	g(v1, v5, v9, v13);
	g(v2, v6, v10, v14);
	g(v3, v7, v11, v15);
	g(v0, v5, v10, v15);
	g(v1, v6, v11, v12);
	g(v2, v7, v8, v13);
	g(v3, v4, v9, v14);
}

/// H0 as defined in the specification.
fn initial_hash(
	lanes: u32,
	hash_length: u32,
	memory_kib: u32,
	passes: u32,
	p: &[u8],
	s: &[u8],
	k: &[u8],
	x: &[u8],
) -> [u8; 72] {
	// We save additional 8 bytes in H0 for when the first two block are processed.
	// So that this may contain two little-endian integers.
	let mut h_0 = [0u8; 72];
	let mut hasher = Blake2b::new(None, BLAKE2B_OUTSIZE).unwrap();

	// Collect the first part to reduce times we update the hasher state.
	let mut first: [u8; 28] = [0u8; 28];
	first[0..4].copy_from_slice(&lanes.to_le_bytes());
	first[4..8].copy_from_slice(&hash_length.to_le_bytes());
	first[8..12].copy_from_slice(&memory_kib.to_le_bytes());
	first[12..16].copy_from_slice(&passes.to_le_bytes());
	first[16..20].copy_from_slice(&ARGON2_VERSION.to_le_bytes());
	first[20..24].copy_from_slice(&ARGON2_VARIANT.to_le_bytes());
	first[24..28].copy_from_slice(&(p.len() as u32).to_le_bytes());

	hasher.update(&first).unwrap();
	hasher.update(p).unwrap();
	hasher.update(&(s.len() as u32).to_le_bytes()).unwrap();
	hasher.update(s).unwrap();
	hasher.update(&(k.len() as u32).to_le_bytes()).unwrap();
	hasher.update(k).unwrap();
	hasher.update(&(x.len() as u32).to_le_bytes()).unwrap();
	hasher.update(x).unwrap();
	h_0[0..BLAKE2B_OUTSIZE].copy_from_slice(hasher.finalize().unwrap().as_ref());

	h_0
}

/// H' as defined in the specification.
fn extended_hash(input: &[u8], dst: &mut [u8]) {
	debug_assert!(!dst.is_empty());

	let outlen = dst.len() as u32;

	if dst.len() <= BLAKE2B_OUTSIZE {
		let mut ctx = Blake2b::new(None, dst.len()).unwrap();
		ctx.update(&outlen.to_le_bytes()).unwrap();
		ctx.update(input).unwrap();
		dst.copy_from_slice(ctx.finalize().unwrap().as_ref());
	} else {
		let mut ctx = Blake2b::new(None, BLAKE2B_OUTSIZE).unwrap();
		ctx.update(&outlen.to_le_bytes()).unwrap();
		ctx.update(input).unwrap();

		let mut tmp = ctx.finalize().unwrap();
		dst[..BLAKE2B_OUTSIZE].copy_from_slice(tmp.as_ref());

		let mut pos = BLAKE2B_OUTSIZE / 2;
		let mut toproduce = dst.len() - BLAKE2B_OUTSIZE / 2;

		while toproduce > BLAKE2B_OUTSIZE {
			ctx.reset(None).unwrap();
			ctx.update(tmp.as_ref()).unwrap();
			tmp = ctx.finalize().unwrap();

			dst[pos..(pos + BLAKE2B_OUTSIZE)].copy_from_slice(tmp.as_ref());
			pos += BLAKE2B_OUTSIZE / 2;
			toproduce -= BLAKE2B_OUTSIZE / 2;
		}

		ctx.reset(None).unwrap();
		ctx.update(tmp.as_ref()).unwrap();
		tmp = ctx.finalize().unwrap();
		dst[pos..outlen as usize].copy_from_slice(tmp.as_ref());
	}
}

#[rustfmt::skip]
///
fn fill_block(w: &mut [u64]) {
	
	let mut v0:  u64; let mut v1:  u64; let mut v2:  u64; let mut v3:  u64;
	let mut v4:  u64; let mut v5:  u64; let mut v6:  u64; let mut v7:  u64; 
	let mut v8:  u64; let mut v9:  u64; let mut v10: u64; let mut v11: u64;
	let mut v12: u64; let mut v13: u64; let mut v14: u64; let mut v15: u64;

	let mut idx = 0;
	
	// Operate on columns.
	while idx < 128 {
		v0  = w[idx      ]; v1  = w[idx +  1]; v2  = w[idx +  2]; v3  = w[idx +  3];
		v4  = w[idx +   4]; v5  = w[idx +  5]; v6  = w[idx +  6]; v7  = w[idx +  7];
		v8  = w[idx +   8]; v9  = w[idx +  9]; v10 = w[idx + 10]; v11 = w[idx + 11];
		v12 = w[idx +  12]; v13 = w[idx + 13]; v14 = w[idx + 14]; v15 = w[idx + 15];

		permutation_p(
			&mut v0,  &mut v1,  &mut v2,  &mut v3, 
			&mut v4,  &mut v5,  &mut v6,  &mut v7, 
			&mut v8,  &mut v9,  &mut v10, &mut v11, 
			&mut v12, &mut v13, &mut v14, &mut v15
		);

		w[idx     ] =  v0; w[idx +  1] =  v1; w[idx +  2] =  v2; w[idx +  3] =  v3;
		w[idx +  4] =  v4; w[idx +  5] =  v5; w[idx +  6] =  v6; w[idx +  7] =  v7;
		w[idx +  8] =  v8; w[idx +  9] =  v9; w[idx + 10] = v10; w[idx + 11] = v11;
		w[idx + 12] = v12; w[idx + 13] = v13; w[idx + 14] = v14; w[idx + 15] = v15;

		idx += 16;
	}

	idx = 0;
	// Operate on rows.
	while idx < 16 {
		v0  = w[idx     ]; v1  = w[idx +  1]; v2  = w[idx +  16]; v3  = w[idx +  17];
		v4  = w[idx + 32]; v5  = w[idx + 33]; v6  = w[idx +  48]; v7  = w[idx +  49];
		v8  = w[idx + 64]; v9  = w[idx + 65]; v10 = w[idx +  80]; v11 = w[idx +  81];
		v12 = w[idx + 96]; v13 = w[idx + 97]; v14 = w[idx + 112]; v15 = w[idx + 113];

		permutation_p(
			&mut v0,  &mut v1,  &mut v2,  &mut v3, 
			&mut v4,  &mut v5,  &mut v6,  &mut v7, 
			&mut v8,  &mut v9,  &mut v10, &mut v11, 
			&mut v12, &mut v13, &mut v14, &mut v15
		);

		w[idx     ] =  v0; w[idx +  1] =  v1; w[idx +  16] =  v2; w[idx +  17] =  v3;
		w[idx + 32] =  v4; w[idx + 33] =  v5; w[idx +  48] =  v6; w[idx +  49] =  v7;
		w[idx + 64] =  v8; w[idx + 65] =  v9; w[idx +  80] = v10; w[idx +  81] = v11;
		w[idx + 96] = v12; w[idx + 97] = v13; w[idx + 112] = v14; w[idx + 113] = v15;

		idx += 2;
	}
}

///
pub fn g_two(block: &[u64], out: &mut [u64]) {
	let mut working_block = [0u64; 128];
	working_block.copy_from_slice(block);
	fill_block(&mut working_block);

	for (el_out, &el_src) in working_block.iter_mut().zip(block.iter()) {
		*el_out ^= el_src;
	}

	let mut tmp_block = [0u64; 128];
	tmp_block.copy_from_slice(&working_block);

	fill_block(&mut working_block);

	// `out` = Z ^ R
	for (el_out, (el_z, el_tmp)) in out
		.iter_mut()
		.zip(working_block.iter().zip(tmp_block.iter()))
	{
		*el_out = el_z ^ el_tmp;
	}
}

///
pub fn g_xor(block_x: &[u64], block_y: &[u64], out: &mut [u64]) {
	let mut working_block = [0u64; 128];
	// R = X ^ Y
	for idx in 0..128 {
		working_block[idx] = block_x[idx] ^ block_y[idx];
		out[idx] ^= working_block[idx];
	}

	fill_block(&mut working_block);

	// `out` = Z ^ R
	for (el_out, el_z) in out.iter_mut().zip(working_block.iter()) {
		*el_out ^= el_z;
	}
}

///
pub struct Argon2i {
	working_block: [u64; 128],
	passes: u32,
	lanes: u32,
	kib: u32,
	lane_len: u32,
}

impl Argon2i {
	///
	pub fn new(passes: u32, kib: u32) -> Self {
		let lanes = 1; // 0x00ffffff < lanes && lanes > 1 == TRUE
		if passes < 1 {
			panic!();
		}
		if (kib as u64) < 8 * lanes as u64 {
			panic!();
		}
		let lane_len = kib / (4 * lanes) * 4;

		Self {
			working_block: [0u64; 128],
			passes,
			lanes,
			kib,
			lane_len,
		}
	}

	#[cfg(test)]
	///
	pub fn new_test() -> Self {
		let lanes = 1;
		let lane_len = 8 / (4 * lanes) * 4;

		Self {
			working_block: [0u64; 128],
			passes: 0,
			lanes: 1,
			kib: 8,
			lane_len,
		}
	}
}

#[test]
fn extended_hash_test_1() {
	let mut out = [
		49, 22, 190, 96, 55, 242, 247, 115, 242, 1, 96, 161, 138, 72, 108, 211, 135, 164, 123, 9,
		199, 223, 163, 248, 176, 81, 208, 255, 71, 67, 29, 215,
	];
	let input = [
		33, 25, 138, 88, 116, 24, 7, 244, 116, 129, 14, 117, 135, 154, 207, 46, 65, 155, 192, 39,
		111, 117, 36, 109, 102, 49, 181, 172, 217, 21, 6, 201, 4, 229, 156, 175, 201, 35, 84, 130,
		195, 50, 97, 38, 137, 182, 162, 240, 16, 46, 202, 146, 2, 73, 136, 4, 215, 200, 149, 252,
		18, 47, 218, 17,
	];
	let expected = [
		23, 122, 170, 179, 137, 61, 145, 86, 70, 228, 124, 82, 24, 135, 208, 96, 33, 127, 145, 136,
		189, 60, 123, 34, 55, 118, 245, 41, 197, 229, 209, 3,
	];
	extended_hash(&input, &mut out);
	assert_eq!(expected.as_ref(), out.as_ref());
}

#[test]
fn extended_hash_test_2() {
	let mut out = [
		241, 8, 207, 144, 211, 141, 215, 81, 145, 190, 184, 85, 99, 72, 157, 91, 32, 190, 241, 192,
		207, 205, 157, 119, 110, 28, 49, 117, 239, 220, 185, 246, 211, 188, 166, 238, 223, 105,
		163, 231, 21, 241, 70, 115, 155, 22, 160, 23, 242, 129, 144, 216, 190, 110, 143, 221, 54,
		4, 71, 239, 101, 95, 155, 196,
	];
	let input = [
		66, 65, 147, 227, 144, 232, 121, 134, 153, 127, 210, 161, 10, 39, 254, 174, 144, 104, 74,
		63, 126, 53, 247, 145, 227, 229, 29, 255, 140, 246, 13, 65, 179, 149, 86, 150, 216, 81,
		178, 131, 136, 40, 139, 220, 43, 185, 119, 249, 161, 244, 0, 177, 176, 139, 164, 135, 21,
		68, 105, 204, 39, 107, 73, 47, 244, 228, 117, 203, 63, 82, 81, 196, 135, 192, 148, 245, 77,
		174, 184, 84, 150, 56, 11, 183, 234, 245, 88, 182, 248, 223, 124, 252, 170, 111, 9, 48, 22,
		227, 18, 118, 136, 22, 250, 22, 108, 229, 176, 186, 19, 45, 67, 105, 19, 45, 94, 113, 16,
		116, 215, 188, 91, 105, 36, 18, 77, 235, 195, 113,
	];
	let expected = [
		33, 81, 20, 93, 250, 207, 85, 11, 227, 90, 81, 170, 97, 236, 60, 207, 156, 65, 52, 186, 53,
		114, 252, 33, 118, 184, 12, 21, 239, 186, 19, 84, 98, 59, 219, 146, 117, 222, 212, 217,
		233, 173, 84, 38, 188, 102, 165, 73, 137, 64, 18, 214, 51, 167, 180, 113, 50, 196, 175,
		138, 96, 109, 95, 61,
	];
	extended_hash(&input, &mut out);
	assert_eq!(expected.as_ref(), out.as_ref());
}

#[test]
fn extended_hash_test_3() {
	let mut out = [
		70, 156, 46, 182, 87, 221, 0, 156, 124, 47, 167, 94, 57, 77, 222, 142, 130, 234, 218, 139,
		119, 27, 170, 129, 232, 219, 152, 79, 7, 237, 81, 3, 203, 33, 116, 167, 159, 232, 31, 143,
		142, 217, 118, 158, 40, 42, 42, 131, 249, 99, 63, 136, 182, 122, 161, 8, 77, 7, 243, 7,
		152, 54, 211, 102, 158, 7, 238, 103, 203, 249, 40, 204, 13, 246, 0, 169, 235, 154, 14, 86,
		4, 183, 145, 233, 248, 125, 155, 22, 8, 207, 80, 40, 159, 55, 207, 151, 248, 170, 101, 233,
		3, 68, 253, 88, 77, 164, 182, 211, 154, 101, 210, 199, 58, 98, 110, 127, 189, 180, 158, 38,
		30, 97, 124, 55, 82, 39, 183, 115,
	];
	let input = [
		103, 132, 147, 55, 198, 201, 33, 151, 217, 248, 118, 190, 164, 159, 224, 197, 172, 89, 93,
		146, 170, 143, 72, 88, 75, 13, 41, 237, 20, 77, 117, 54, 100, 76, 198, 85, 222, 182, 69,
		119, 55, 251, 165, 141, 16, 105, 157, 25, 14, 70, 182, 131, 95, 21, 156, 64, 3, 133, 179,
		66, 9, 33, 181, 158, 165, 212, 142, 86, 22, 236, 235, 17, 243, 34, 13, 109, 56, 111, 63,
		75, 217, 153, 60, 159, 172, 233, 145, 142, 181, 136, 210, 174, 187, 55, 153, 214, 105, 233,
		196, 69, 64, 0, 59, 25, 21, 27, 233, 87, 119, 31, 184, 15, 160, 55, 228, 132, 41, 110, 255,
		79, 90, 141, 183, 156, 251, 89, 90, 151, 199, 149, 220, 31, 85, 85, 87, 253, 79, 97, 18,
		125, 251, 227, 120, 236, 196, 203, 135, 195, 194, 160, 129, 89, 40, 111, 160, 222, 101,
		149, 109, 153, 90, 156, 220, 219, 89, 128, 8, 17, 104, 108, 145, 233, 121, 100, 124, 151,
		96, 39, 187, 132, 173, 9, 74, 154, 199, 126, 104, 241, 198, 190, 148, 221, 29, 50, 234, 19,
		75, 139, 135, 34, 247, 247, 226, 245, 142, 140, 152, 53, 210, 65, 174, 168, 70, 41, 13, 11,
		108, 29, 2, 93, 24, 156, 209, 159, 123, 80, 76, 111, 245, 39, 81, 252, 114, 82, 175, 107,
		42, 34, 131, 221, 209, 23, 231, 174, 242, 10, 17, 77, 251, 138, 239, 213, 157, 197, 87, 96,
	];
	let expected = [
		247, 38, 177, 59, 225, 220, 244, 197, 13, 169, 51, 184, 170, 167, 18, 78, 77, 196, 23, 182,
		207, 227, 211, 203, 66, 202, 238, 18, 72, 7, 110, 92, 162, 84, 125, 185, 132, 129, 210,
		217, 217, 93, 17, 93, 58, 18, 31, 165, 3, 194, 111, 223, 231, 8, 120, 102, 201, 76, 149,
		253, 233, 246, 199, 21, 157, 107, 186, 47, 123, 209, 94, 151, 56, 53, 33, 8, 116, 26, 58,
		53, 255, 51, 184, 18, 241, 179, 54, 15, 181, 18, 117, 48, 83, 190, 250, 39, 126, 145, 178,
		150, 185, 87, 172, 5, 176, 110, 227, 142, 233, 63, 85, 225, 162, 85, 179, 166, 250, 222, 5,
		10, 139, 187, 172, 105, 171, 171, 140, 253,
	];
	extended_hash(&input, &mut out);
	assert_eq!(expected.as_ref(), out.as_ref());
}

#[test]
fn initial_hash_test_1() {
	let lanes = 13904368;
	let hlen = 3907471185;
	let kib = 259743212;
	let passes = 18490926;
	let _version: u32 = 0x13;
	let _variant: u32 = 1;
	let p = [
		4, 6, 81, 32, 145, 216, 125, 101, 103, 144, 190, 253, 176, 184, 156, 93, 143, 1, 131, 57,
		40, 19, 212, 124, 48, 240, 236, 228, 2, 226, 93, 34,
	];
	let s = [
		171, 132, 4, 29, 78, 251, 21, 239, 242, 219, 235, 214, 30, 42, 18, 235, 202, 71, 33, 230,
		167, 97, 217, 107, 113, 22, 17, 36, 132, 242, 156, 183,
	];
	let k = [
		162, 251, 158, 52, 36, 228, 127, 208, 115, 187, 171, 190, 148, 191, 115, 239, 236, 189,
		126, 228, 207, 89, 118, 1, 32, 173, 168, 122, 0, 161, 25, 209,
	];
	let x = [
		152, 248, 249, 27, 40, 26, 69, 117, 40, 242, 52, 206, 10, 85, 112, 48, 188, 241, 230, 92,
		192, 248, 224, 18, 119, 246, 15, 80, 12, 99, 0, 14,
	];

	let expected = [
		170, 218, 89, 57, 211, 155, 84, 233, 106, 6, 110, 162, 161, 208, 48, 166, 46, 190, 69, 119,
		254, 79, 19, 75, 122, 72, 152, 142, 178, 2, 28, 172, 150, 171, 67, 87, 62, 226, 23, 165,
		241, 89, 4, 180, 220, 72, 38, 173, 57, 202, 36, 138, 38, 64, 177, 96, 164, 250, 15, 246,
		247, 89, 84, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	];
	let actual = initial_hash(lanes, hlen, kib, passes, &p, &s, &k, &x);
	assert_eq!(expected.as_ref(), actual.as_ref());
}

#[test]
fn initial_hash_test_2() {
	let lanes = 5239549;
	let hlen = 13858325;
	let kib = 227600322;
	let passes = 183161258;
	let _version: u32 = 0x13;
	let _variant: u32 = 1;
	let p = [
		10, 59, 78, 114, 127, 190, 152, 14, 166, 123, 142, 129, 202, 132, 211, 177, 216, 79, 19,
		209, 211, 193, 153, 141, 147, 101, 203, 115, 51, 16, 12, 27, 27, 90, 56, 105, 178, 40, 82,
		53, 29, 5, 63, 184, 64, 73, 50, 116, 136, 200, 168, 97, 155, 185, 59, 242, 141, 92, 70, 81,
		0, 18, 75, 246,
	];
	let s = [
		173, 228, 122, 19, 250, 83, 201, 244, 182, 25, 99, 217, 35, 51, 30, 90, 43, 234, 82, 134,
		61, 121, 0, 229, 71, 20, 139, 83, 202, 207, 94, 100, 172, 202, 3, 135, 212, 154, 73, 183,
		222, 201, 5, 161, 180, 114, 229, 105, 248, 52, 41, 153, 240, 254, 212, 212, 177, 215, 120,
		38, 223, 139, 111, 109,
	];
	let k = [
		101, 12, 241, 36, 49, 164, 186, 229, 177, 191, 139, 20, 66, 31, 106, 6, 212, 209, 209, 7,
		183, 14, 19, 30, 210, 235, 37, 255, 33, 72, 90, 105,
	];
	let x = [
		255, 183, 169, 255, 57, 225, 104, 148, 179, 248, 144, 220, 159, 113, 24, 188, 26, 177, 96,
		11, 90, 146, 14, 85, 253, 59, 223, 82, 100, 141, 125, 42, 227, 227, 231, 130, 180, 233,
		107, 121, 199, 78, 19, 222, 8, 105, 152, 63, 104, 37, 211, 62, 214, 105, 56, 178, 209, 201,
		102, 162, 204, 196, 130, 31,
	];

	let expected = [
		233, 199, 37, 75, 21, 24, 208, 100, 79, 252, 76, 17, 7, 91, 251, 21, 51, 33, 143, 232, 6,
		197, 112, 119, 79, 147, 91, 9, 10, 76, 193, 233, 82, 122, 217, 251, 120, 215, 108, 147,
		120, 34, 3, 78, 168, 143, 228, 168, 47, 133, 0, 237, 73, 61, 124, 43, 231, 10, 116, 90, 11,
		54, 24, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	];
	let actual = initial_hash(lanes, hlen, kib, passes, &p, &s, &k, &x);
	assert_eq!(expected.as_ref(), actual.as_ref());
}

#[test]
fn initial_hash_test_3() {
	let lanes = 7910517;
	let hlen = 3412429024;
	let kib = 240045138;
	let passes = 156919166;
	let _version: u32 = 0x13;
	let _variant: u32 = 1;
	let p = [
		103, 14, 186, 202, 83, 171, 213, 130, 3, 196, 116, 252, 108, 76, 108, 184, 207, 61, 1, 187,
		228, 0, 83, 6, 168, 9, 200, 62, 52, 48, 81, 250, 182, 38, 45, 91, 91, 69, 129, 109, 97, 90,
		226, 56, 208, 48, 148, 192, 180, 184, 96, 143, 137, 183, 233, 170, 156, 245, 176, 77, 204,
		166, 238, 93, 93, 34, 16, 35, 178, 79, 122, 67, 8, 18, 210, 20, 178, 215, 97, 158, 214, 31,
		137, 123, 216, 175, 182, 224, 52, 15, 55, 197, 198, 107, 170, 85, 158, 235, 165, 41, 26,
		135, 209, 231, 79, 128, 141, 75, 118, 142, 237, 51, 72, 110, 150, 202, 13, 170, 70, 12, 26,
		31, 75, 128, 62, 91, 157, 116,
	];
	let s = [
		175, 79, 217, 215, 89, 70, 45, 15, 151, 213, 168, 149, 121, 125, 83, 16, 84, 228, 42, 125,
		75, 115, 144, 80, 52, 121, 221, 112, 237, 226, 99, 29, 134, 28, 79, 184, 59, 77, 36, 145,
		35, 239, 119, 140, 190, 11, 74, 100, 191, 33, 93, 27, 1, 98, 67, 116, 241, 135, 145, 220,
		63, 203, 50, 189, 155, 101, 237, 128, 221, 251, 131, 162, 157, 179, 93, 187, 67, 203, 180,
		241, 186, 194, 81, 184, 81, 142, 6, 244, 49, 65, 86, 235, 64, 33, 244, 243, 113, 35, 48,
		35, 188, 251, 48, 66, 70, 106, 210, 45, 10, 223, 27, 103, 4, 130, 91, 201, 111, 98, 171,
		29, 19, 173, 21, 165, 197, 192, 81, 192,
	];
	let k = [
		210, 94, 220, 54, 169, 24, 91, 182, 169, 86, 184, 150, 72, 94, 221, 155, 141, 147, 219, 1,
		114, 154, 143, 70, 232, 224, 55, 65, 123, 122, 242, 150,
	];
	let x = [
		45, 137, 168, 68, 63, 62, 99, 153, 199, 242, 19, 10, 102, 30, 207, 156, 68, 39, 189, 135,
		65, 162, 188, 46, 111, 159, 20, 94, 60, 76, 151, 194, 123, 64, 33, 148, 243, 226, 174, 211,
		131, 16, 74, 93, 226, 253, 210, 16, 160, 115, 233, 19, 140, 135, 136, 252, 8, 160, 115, 90,
		89, 203, 248, 56, 119, 255, 51, 181, 208, 94, 214, 68, 212, 170, 102, 31, 86, 249, 203,
		251, 117, 190, 25, 221, 82, 68, 170, 236, 197, 95, 49, 115, 144, 151, 33, 98, 8, 13, 3, 12,
		36, 47, 193, 85, 215, 183, 168, 48, 22, 192, 93, 9, 160, 153, 182, 76, 73, 244, 92, 29,
		165, 251, 226, 183, 118, 144, 182, 82,
	];

	let expected = [
		241, 142, 113, 252, 218, 13, 95, 5, 155, 84, 34, 15, 130, 21, 17, 111, 59, 26, 17, 54, 147,
		12, 156, 193, 184, 251, 234, 150, 72, 219, 7, 150, 16, 2, 100, 82, 234, 157, 74, 212, 30,
		221, 177, 89, 63, 181, 199, 114, 247, 167, 76, 36, 95, 253, 81, 198, 165, 67, 238, 90, 173,
		205, 140, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	];
	let actual = initial_hash(lanes, hlen, kib, passes, &p, &s, &k, &x);
	assert_eq!(expected.as_ref(), actual.as_ref());
}

#[test]
fn g_test() {
	let mut w0: u64 = 15555726891008754466;
	let mut w1: u64 = 5510367530937399982;
	let mut w2: u64 = 11481008432838211339;
	let mut w3: u64 = 8667059981748828325;

	let r0: u64 = 12666226408741176632;
	let r1: u64 = 839899491230516963;
	let r2: u64 = 17298398443694995777;
	let r3: u64 = 10383764314571024184;

	g(&mut w0, &mut w1, &mut w2, &mut w3);

	assert_eq!(w0, r0);
	assert_eq!(w1, r1);
	assert_eq!(w2, r2);
	assert_eq!(w3, r3);
}

#[test]
fn p_test() {
	let mut v0: u64 = 862185360016812330;
	let mut v1: u64 = 9264562855185177247;
	let mut v2: u64 = 17733520444968542606;
	let mut v3: u64 = 13219822890422175473;
	let mut v4: u64 = 6801067205434763034;
	let mut v5: u64 = 10578543507696639262;
	let mut v6: u64 = 10108704228654865903;
	let mut v7: u64 = 2299791359568756431;
	let mut v8: u64 = 15201093463674093404;
	let mut v9: u64 = 13723714563716750079;
	let mut v10: u64 = 9719717710557384967;
	let mut v11: u64 = 1845563056782807427;
	let mut v12: u64 = 1829242492466781631;
	let mut v13: u64 = 17659944659119723559;
	let mut v14: u64 = 14852831888916040100;
	let mut v15: u64 = 12286853237524317048;

	let r0: u64 = 560590257705063197;
	let r1: u64 = 9520578903939690713;
	let r2: u64 = 3436672759520932446;
	let r3: u64 = 14405027955696943046;
	let r4: u64 = 17277966793721620420;
	let r5: u64 = 3246848157586690114;
	let r6: u64 = 13237761561989265024;
	let r7: u64 = 9829692378347117758;
	let r8: u64 = 1155007077473720963;
	let r9: u64 = 10252695060491707233;
	let r10: u64 = 10189249967016125740;
	let r11: u64 = 14693238843422479195;
	let r12: u64 = 13413025648622208818;
	let r13: u64 = 16791374424966705294;
	let r14: u64 = 11596653054387906253;
	let r15: u64 = 12616166200637387407;

	permutation_p(
		&mut v0, &mut v1, &mut v2, &mut v3, &mut v4, &mut v5, &mut v6, &mut v7, &mut v8, &mut v9,
		&mut v10, &mut v11, &mut v12, &mut v13, &mut v14, &mut v15,
	);

	assert_eq!(v0, r0);
	assert_eq!(v1, r1);
	assert_eq!(v2, r2);
	assert_eq!(v3, r3);
	assert_eq!(v4, r4);
	assert_eq!(v5, r5);
	assert_eq!(v6, r6);
	assert_eq!(v7, r7);
	assert_eq!(v8, r8);
	assert_eq!(v9, r9);
	assert_eq!(v10, r10);
	assert_eq!(v11, r11);
	assert_eq!(v12, r12);
	assert_eq!(v13, r13);
	assert_eq!(v14, r14);
	assert_eq!(v15, r15);
}

#[test]
fn test_g_xor() {
	let mut out = [
		7398683070638530305,
		15896182410815807597,
		447142881799302744,
		10474671874363427668,
		9046357952859554665,
		11209176059796190649,
		10019379136472486577,
		6232130859712482325,
		16615131340644158237,
		13735089619048782636,
		14298082005473720165,
		1810652210612408956,
		5018302214857172677,
		14258035885389438775,
		9452647680119103937,
		17071785360942638377,
		17808166804506460212,
		13711999061105805084,
		14411161895848391325,
		16454165384083979895,
		6303286203696029853,
		1008080550879767853,
		693621161600295846,
		17676173626513888510,
		14768109299477360935,
		3973656036407372733,
		7369140046741954878,
		6549430196392548872,
		13874158621063639211,
		3662401477041225395,
		17069381107453756972,
		836156322174043573,
		13055473912069001265,
		17930880492487902969,
		3426323524231369820,
		7813775000059231509,
		13461092029180038481,
		142532153316340068,
		4383605297402496360,
		17316095354548117823,
		13276031217404181765,
		170060672416483199,
		5454559597318524410,
		4180543724445446999,
		4215222630820220598,
		5137723994020462796,
		11669165249963680782,
		5799434169146044261,
		131840949142460909,
		2749952313602859545,
		5402876748875481637,
		9647865805442616586,
		18229394736221298390,
		14202569888047289343,
		7211343575354767235,
		13654159391843818389,
		13963919275090699115,
		11088375727683683053,
		14570189388528661159,
		13799216394806398467,
		10356292965286071537,
		7676995439674260734,
		13596498041339127076,
		16240204562713224894,
		12158961114669941892,
		7128847297895117694,
		18351144462701861797,
		1214729271797817397,
		6482307409537575396,
		662905049595346777,
		16262640426704420790,
		9063903406358155971,
		5663229111550296519,
		1477190623092126631,
		13347670099952385079,
		11553960028018404809,
		4970957783130834929,
		261463617127174878,
		18200744675228463668,
		4351510013256753668,
		2270687564216890912,
		12530478334463903571,
		16803042343370559762,
		11048624487421560191,
		780042902841028410,
		5894118533025416093,
		12412993030519613340,
		9658894495636952958,
		17311075770011473365,
		15901122994762087008,
		10699394236937334307,
		12003520317622842716,
		9901268808985670611,
		17105772022215034441,
		15267606549569975906,
		5531243521531314325,
		5191545181941006469,
		14340239608137352342,
		584140573758853354,
		6748725218853780943,
		11752343022661796223,
		5708020747538996504,
		16193936351739020004,
		14039213250335793615,
		4951219703650925776,
		17471317802243212505,
		11623016048265479411,
		14936543652383575039,
		187763337233460306,
		18070978216679802669,
		15069862808547605593,
		14146142453095349476,
		16331024813377038564,
		1070063519384777004,
		7207345155705415961,
		13503222985685858249,
		9270293664171161734,
		14803830684079575956,
		14905502743660034729,
		9310832015653485327,
		18182383926244411674,
		12346347956146829721,
		8063748636375767699,
		6136625808088257169,
		14559906877865839489,
		5877556921071445066,
		1788063800853794955,
		9154282002104447813,
	];
	let bx = [
		15869849189515490794,
		18163623839032254530,
		13170249061786741289,
		3873700137058953021,
		15142286771178666857,
		1924412278588605354,
		14281699608581789040,
		3049633759887641299,
		5217812637750165479,
		961248826777525304,
		2477719292824184620,
		6149933217908398367,
		12261102944699462682,
		6789522581456781277,
		709336897250313752,
		477649135249117517,
		11999319843660328676,
		17689339095061498631,
		16654035839437298745,
		6220513707490144697,
		1831340582399893186,
		9880981568994804873,
		13409974110639791798,
		11322203031473692558,
		15786187261648722638,
		12223088824612421366,
		13929976781312754006,
		3177936934841446790,
		6132278611372195514,
		3904159906628076264,
		12246223605613068932,
		13634734609747078704,
		16720111799697589852,
		6295676939612371846,
		11053732315300055282,
		7647948622644337838,
		236550491178351132,
		9543736445741765128,
		7113977505170588239,
		10882228438470685880,
		8329620374649798198,
		12854354396113237577,
		3583764483768553293,
		4910832028918493123,
		7895123400208513127,
		5374877265063507858,
		3506680838215879294,
		15435195941252341258,
		12364202158255068370,
		1049950788355532202,
		5710070203586873402,
		303832959839072562,
		14616726248145281780,
		17650091894962497002,
		5862580214930854143,
		14075788448495431183,
		6412714748613154163,
		18207230380492239139,
		1763086469702287537,
		14712962795973072956,
		4246688402911764138,
		2134929937117670977,
		13714320381079968109,
		1940653890110634741,
		9994526276998346911,
		9994865170567108526,
		16565770192987933108,
		10310739512694475765,
		3801345741722998556,
		4773528893929340172,
		14207164837120792447,
		12852066914544727689,
		9624281401985847316,
		1279615482842761726,
		9627964569305041369,
		16860868635432980173,
		2474318809307561585,
		18113415738298550874,
		15031567938364376098,
		3404135079213926461,
		11241246475240042806,
		12628157602710988065,
		9145502467804404841,
		3436096550301645677,
		1556779722634094060,
		10886757596159512819,
		13014819211715969117,
		8066081575081204955,
		16896596438941778606,
		8373974943617963277,
		15558919334344434390,
		17448160756306477661,
		1523345199340628269,
		2821144570958624142,
		17126853906642803332,
		5512011600820963670,
		12390510977806673622,
		8109370136142825447,
		6665423782206049541,
		1349510220565543210,
		13552117836135432112,
		3660926889697475621,
		3038458536237806467,
		6783885278528344798,
		13192624972233965874,
		13683412069213657841,
		16430830715716327257,
		9715756663892731975,
		9052174313578475012,
		10378179046986505520,
		16388863127151325704,
		1160683769330615600,
		3877686108121182423,
		15410649948648680214,
		517609432034052423,
		17953019277226132585,
		9357546477847609668,
		2235886010130089124,
		2524020628655092386,
		12001358874239647805,
		14372974328538374674,
		1221462569161055140,
		8912567749736953071,
		9833617765237620676,
		9706217109450962260,
		3579200277357220807,
		6837684949725034954,
		16738072722512579950,
	];
	let by = [
		3108085343241145933,
		7462961413793070405,
		10754742178530214478,
		6469088885657299815,
		3391484415171518735,
		1037246570962450831,
		12454692974221520467,
		530124365456761080,
		4058178371242890836,
		17877385716249160992,
		9513203833512466327,
		17881969848702776698,
		6865137083307372302,
		12012044907866422210,
		11225161137649831110,
		17049224403755283496,
		16139202928136580630,
		8902180449876143490,
		3339448839257619260,
		4399209124637168827,
		11624058468610363374,
		1876694516658758206,
		7319620871627243343,
		11941238154309469062,
		3998446774012674173,
		8699107045514444439,
		13089430141560854721,
		6404846936145095331,
		12099737045391452131,
		13882289028010564103,
		15547637382549593456,
		6292051006377262112,
		4679641473383393256,
		15728936198683230005,
		1271890869723600047,
		5919095777941137492,
		12908296468556894920,
		13257933049110770004,
		4712161503815859432,
		7690316053708779776,
		3146707980763363002,
		6470308726553604827,
		9535904356202071150,
		10265634742548766540,
		5358226614162745286,
		8915955523583988571,
		10118727451978623030,
		4982362420827526721,
		8081926822096983315,
		13129017865904785502,
		6244626114188506002,
		16381322716115045748,
		13739796780167061370,
		15230079219752953129,
		12160194419170217661,
		4688700440833812268,
		17780472480906234105,
		1305285618865266764,
		29096446667370749,
		18185791235446473961,
		5195823565937013046,
		14002796045459340338,
		16322466747919029367,
		3050492940776820769,
		8602187663701083887,
		14569587616497247262,
		3112126821708208050,
		7692905275973998624,
		15720619396633643797,
		11986129394921978989,
		962113118807385933,
		11969529786384531473,
		12806067719577704987,
		6705905866523449299,
		3299858521005389632,
		11499460050011827336,
		18046149075810769104,
		1672783236821037808,
		1582270100906871733,
		2042351334825224367,
		3003541837872664414,
		3592435647045942594,
		7995605256516621677,
		13659665961489287164,
		9227922028813467893,
		7285063265600851064,
		14692119753187587595,
		17803209981599462018,
		13587237491394337579,
		11426734190620819593,
		13768645611815519268,
		5879842691832232491,
		16735407796375623686,
		14846745414259198801,
		10208915607255856846,
		9117781038149514216,
		5390881394265366905,
		2303768242917185706,
		4371650809089118583,
		11548484349562845164,
		16578361077804362372,
		6048194812799940050,
		5873399871267670534,
		5061665064642224107,
		13026542363658587298,
		14738089091582606377,
		16873020616872919504,
		351494131205963131,
		9766348887106054184,
		7054857287236404672,
		616808809422334389,
		8526262881012965589,
		16723250537134036310,
		4011786507511313064,
		802708431136676049,
		7509714954230200670,
		17105378639065086022,
		3566919228059885621,
		3414686349149842517,
		13525191065094265046,
		3615369334370299133,
		12075193399027755144,
		5810377230037060702,
		14243304931369573695,
		3098233114168187204,
		1167158190958072005,
		4968480053044877566,
		6534213840937031509,
	];
	let expected = [
		7975204646319209385,
		14761843535645855478,
		16584476889036220930,
		9988784511571401654,
		718908277824563109,
		15543487366863971915,
		16239801623505951085,
		14910421035205083449,
		17141230187583011697,
		5106407165959895845,
		12846581973666733645,
		13942893766552789715,
		9161274775964324966,
		12940719242245404326,
		17057678965603265118,
		8220116832526526192,
		6278076428446232525,
		12838288904769228105,
		249841596399054951,
		12276460062368603977,
		12333346548630761363,
		10084946815522176232,
		14245800923888139727,
		7368874438000269321,
		14632733988498411742,
		6841854606626573752,
		9626935049840143744,
		16049468025774462628,
		13025754516805974114,
		6990351263696410189,
		3302986792864153870,
		13814617169999205817,
		3265809801840436301,
		11277459649348636313,
		7390120422726468287,
		8133037565154582892,
		11423242045873694671,
		17202393347815965279,
		14032905533949680968,
		8577407064304258589,
		9789170499522938675,
		2563765041310669840,
		7316628286840690293,
		12402686875463123111,
		17869533623341144999,
		17137644829472365302,
		15673548712125418534,
		16696719898229853706,
		10347943818654988744,
		13670838804533633487,
		4521777758608315586,
		5891774200469924562,
		13130896301031278039,
		17806089672904595,
		17970427047885942640,
		174561858210476055,
		13792506160073733879,
		7070497271512305577,
		18089533549808144269,
		1877670259370152904,
		14464911514284003514,
		12684033817008618107,
		8129156476452720767,
		2457979048823432498,
		3062432127643153765,
		7630583121386113016,
		2708591492116897761,
		14796172145467744599,
		9440751559424954212,
		13138491935714477266,
		4930918497319266848,
		4864972442217451762,
		1416643557846511751,
		7827461239315059199,
		15151436228905792276,
		17434627430888836127,
		14283726390101925201,
		575143276621405402,
		12624116761323021509,
		8191272814976598318,
		4144702779749223122,
		491328213015515496,
		11430523169985692049,
		5833095877174412862,
		6093305104497518588,
		9666903847826499129,
		14833055569957196251,
		788715194734895934,
		7681897010389658288,
		7600755677421703293,
		10544226263903490607,
		985006206668900587,
		12871034497679380780,
		10300014831037165968,
		1485273520995368006,
		15369875061221027439,
		8029111732365439566,
		15325190749299482051,
		4734549883469896876,
		378596377372768505,
		11401660155742221577,
		9741528160440978139,
		16197508600268261425,
		9976476938165852392,
		8253791999721215291,
		4888681722715191605,
		17695721526627431119,
		14511895074279601193,
		10853542156351159353,
		14871833920700103885,
		13422991890746426219,
		2007090188608045478,
		1760519758854002190,
		2800852927598200187,
		15418834699799948321,
		5750553096960653511,
		11921690498077431680,
		3012794981058541373,
		1090333981867470722,
		2418154675942199462,
		6967132129783610983,
		7988210520146082887,
		8179499533822846338,
		6410588665396535211,
		10769159957238581062,
		6736883218317923062,
		3497446128165304721,
		14859714850203231734,
	];

	g_xor(&bx, &by, &mut out);
	assert_eq!(out.as_ref(), expected.as_ref());
}

#[test]
fn test_g_two() {
	let mut out = [
		14218257205485078948,
		377166090310013411,
		14442281941250579122,
		41041982324367967,
		14283364353271921675,
		3200566737669148335,
		13944104025856768339,
		12512562529490941941,
		18331970687049623012,
		4235670190994347735,
		12668268933515170576,
		14872952669014857926,
		1509286262397221018,
		17638971287383381485,
		2850319146449050475,
		3512118435698336708,
		6973882538117416410,
		8769619655773798783,
		7412346027793450323,
		13258628619712488401,
		14982699153006755877,
		16487934032270415544,
		4093448154196839738,
		18348700973491169044,
		9363581157946798540,
		3960439682299016397,
		7160573029219249326,
		10676480572793760723,
		2985153196491007390,
		7105684017538357575,
		1737056331305181842,
		5656532899023204808,
		808624918939435334,
		6295492392924332707,
		17682734721207288911,
		7832539474512631413,
		7711505133202053049,
		15377053730240970770,
		16177659874640516853,
		3584690025524399568,
		7822987371039958013,
		14117747811569764917,
		5666546533117489342,
		6675043217506652682,
		8347781853392960901,
		11430483466545273241,
		1927858372621824612,
		9784689885513177790,
		17085871313805286061,
		15122400420011721945,
		7331182636763647071,
		11356367591894058432,
		1707743483253794744,
		5188254923506739688,
		5940036599158462229,
		11114027454107164888,
		10297358460937964649,
		7139092374863403911,
		16763157513963096604,
		11211403664332693845,
		12918356707052624946,
		11830281441878149832,
		14679520144706665937,
		8137622953109547383,
		5573726309501209434,
		18006773904818957126,
		9409231370976005161,
		17299964444482200351,
		9116071556555110526,
		12899569952112501512,
		1826282008792967495,
		17390174140338286028,
		18385472744774816501,
		8044721004524065011,
		16681614648782728705,
		11900529582489165472,
		16238172113980825200,
		8490303308701083992,
		10281755993117414166,
		11591531514801565488,
		12846704712000553679,
		9139416689421563757,
		14662451189839744685,
		11342063918211634469,
		51630143815194049,
		11027439787942741474,
		6062200388620099781,
		15640616788803071784,
		1817630546172179629,
		15933847354378167489,
		6028423773252443768,
		9923360189278736248,
		4964964397118815410,
		17018731952419511884,
		4393477200508921065,
		12153323817602145676,
		7327780219901012444,
		12544679942758689198,
		14035205186864120483,
		15386509464953368112,
		8044138344567513251,
		136153276710028972,
		1166721215406349546,
		3338160201717130979,
		14295714981619551587,
		1665772802488747352,
		13895966427219487191,
		18358863787912891107,
		6233755827048273658,
		14163221811506096000,
		12910285483853011197,
		1850219517101980581,
		12322570661141319870,
		2568488250528085121,
		6543087978566051686,
		13292954001349787595,
		6541850595858744744,
		2646917657399549519,
		708190475100077276,
		1749834814141212879,
		5457746241185739782,
		17045403665905689102,
		4924569183284423398,
		15762810030372880380,
		15477431977702553494,
		6983662915464802667,
		12302846275521875861,
		199936321193845609,
	];
	let src_block = [
		2766686964893898950,
		16908180970962414364,
		6687974708263850233,
		5846438948252015333,
		1163223052394492744,
		17355879847049205544,
		15257047661136519352,
		3619716415393994844,
		9358723389561491047,
		12955449270754131350,
		14107665881604555214,
		12445017834226498970,
		8252579618476137341,
		6766732665468626355,
		2061579629986564594,
		11089885870430215926,
		3863171032614494255,
		14337616776012313638,
		10404148214640409387,
		14893070268031781366,
		4892812513416225503,
		3301230951640897052,
		12591630258835684587,
		15484963145657447752,
		2273508717548461612,
		15481794969369423653,
		14003291471378604712,
		10213235460242753258,
		1737740267320257237,
		12062728985262508978,
		12194341248764797419,
		129489349203875795,
		17723638833181418115,
		17905457832546846213,
		2862095229225157803,
		3746376270698968317,
		3501090940768989090,
		14453729686132946685,
		7736261574698793079,
		6058337323335452644,
		9026905405897906624,
		11222804079819280289,
		11838938718578812067,
		3344244642427879890,
		8518954657229620626,
		9013585526062075934,
		16921690625059257696,
		6986661350203968952,
		9283146740929868230,
		18245636919182657365,
		15094243687415565754,
		3773974038240890213,
		5019607862612544384,
		5509951647512405637,
		4947957221572090414,
		11114667802334968167,
		162403707486733973,
		17376858299262686006,
		12331236843388604613,
		5587048978918533838,
		17038473334449357249,
		9657417685792786223,
		313215744880143275,
		13125192664917322711,
		15372676069147675928,
		11109231326593598966,
		9294925988300513723,
		12632224344676544548,
		6501047058706570393,
		15849359416923984247,
		16109878100478657019,
		7256549542839407086,
		14089965781561155724,
		3528792506764882874,
		14465082903139437657,
		1211516937046734150,
		14427626706790321986,
		2284275087345580747,
		13612424710121987608,
		6751892688997175823,
		2308854948352150692,
		5556703162886968391,
		8829998534599295505,
		15105135101442862049,
		1136259959912382544,
		8236465854181662797,
		10652052262808705258,
		16026908174552230419,
		14479744262787515723,
		2048905816627947917,
		5537643244729991621,
		17002500744686933555,
		11021450915421027960,
		7702108101893831067,
		3928252660327946800,
		12728975113457065972,
		10435604578424709990,
		15109319284157671587,
		16493988188104641868,
		15806770858182180711,
		6730920494325993845,
		12480188903866718869,
		12339456908157437787,
		5190455719188745939,
		3489890702953514134,
		5705360512992537352,
		13704302704016594021,
		4785793702234778962,
		4386573041150470366,
		4961393233867373413,
		11154806474353406504,
		14016849150640408479,
		3440865358264987036,
		1957622203444889421,
		4377997800016104268,
		9800505943405160065,
		15405961566396471201,
		10811873377819296311,
		1041204473852794999,
		16374425382394674089,
		4433847845893133142,
		926280839455125019,
		10021723402897767591,
		1916252401224087838,
		9968697491339827241,
		10922899533539425425,
		17061163126188478002,
		5239134679642176508,
	];
	let expected = [
		464637937249406973,
		11056283839401966808,
		3972904613710949742,
		11472398534803182119,
		10259316238121282882,
		6283867605712944767,
		14655911519139408072,
		9526442095835321601,
		14785643193372180501,
		6628323470099226457,
		17666551511640004471,
		791640672277223577,
		13876245376923254332,
		17350517898614715522,
		4419702451688511046,
		7914412163446757064,
		11401220757491388553,
		13735481769596659348,
		10165586690521297847,
		2286052450377744012,
		10187868127815007402,
		4597683493213707372,
		10266125327222676901,
		5591191105653091189,
		10064807444901461105,
		1065828168474788536,
		7336792846278857625,
		940421382327875025,
		12071859234014184850,
		9849788706373762892,
		16065374027965284809,
		12332086320849643847,
		14438888902509062270,
		8920630374754648456,
		10368433984629763008,
		14606780942991279781,
		7097175017978845509,
		15668079104160962190,
		16711199257193569331,
		4569473295102349568,
		7711830469961719009,
		752803035388818733,
		5228650585364577710,
		10356304971368780201,
		7400581982091796917,
		953059694900626077,
		13769145437315785419,
		6782617044381766302,
		8207137954482243045,
		11681712318383234438,
		16413084952724416982,
		9876136755002962445,
		1206163205622830038,
		197780055333947266,
		5950151794894182203,
		16723585053900045208,
		1910247356129832539,
		8229185848085881534,
		3013512961244434895,
		11816668162289437951,
		11073366402660634957,
		18104172605200670597,
		4083118464627332235,
		17303535777975701318,
		11335118906447974845,
		15728169103839003381,
		13896806396441499815,
		16703797732952254197,
		12300803608501976994,
		1075577697912753394,
		8564342078377621034,
		11000291400603232620,
		16425519889159097756,
		12822691762657845988,
		6432196869400586776,
		16370904082623130281,
		2074826290971854835,
		10567600760282219076,
		9027313532658145624,
		3747259133463750940,
		7223928221868487403,
		16075346114992238262,
		6664102777981493809,
		644850076747211149,
		14450507160962380089,
		3853796029488913097,
		10033338667614161988,
		9336224369246556424,
		2347278592345872520,
		2928195343424649940,
		4401910166713287552,
		4673656897677613506,
		17181638683137761159,
		4543381084567973652,
		14559189844958657899,
		13458373424349818364,
		7423410951968557020,
		6890385887018160358,
		782578457847149140,
		16778191230855493620,
		14181761952931050717,
		13215839982720642729,
		4480324852031718712,
		951420773318042482,
		7404365173780839016,
		11502386762554067055,
		13856595530277697118,
		14218707582344133810,
		14199762706140818612,
		12121878029630837619,
		11157368554503807807,
		15214865183424223731,
		1426311672563029128,
		5278685780170839600,
		10335688113805298755,
		8707859829725821710,
		5129832745060003952,
		10144580168891454756,
		2548869667596871181,
		51610422553803686,
		4153240166805656445,
		12598977851347877692,
		10359758955924054715,
		8159004530578542382,
		2427328869927453898,
		10623443640948040503,
		17376310436267225097,
		16243793922956959956,
	];

	g_two(&src_block, &mut out);
	assert_eq!(out.as_ref(), expected.as_ref());
}
