// MIT License

// Copyright (c) 2018-2020 The orion Developers

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//! # Parameters:
//! - `PLACEHOLDER`: PLACEHOLDER.
//!
//! # Errors:
//! An error will be returned if:
//! - PLACEHOLDER
//!
//! # Panics:
//! A panic will occur if:
//! - PLACEHOLDER
//!
//! # Security:
//! - PLACEHOLDER
//!
//! # Example:
//! ```rust
//!
//! ```

use crate::hazardous::hash::blake2b::{Blake2b, BLAKE2B_OUTSIZE};

/// The Argon2 version.
pub const ARGON2_VERSION: u32 = 0x13;

/// The Argon2 variant (i).
pub const ARGON2_VARIANT: u32 = 1;

#[must_use]
#[inline(always)]
///
const fn lower_mult_add(x: u64, y: u64) -> u64 {
	let mask = 0xFFFF_FFFFu64;
	let x_l = x & mask;
	let y_l = y & mask;
	let xy = x_l.wrapping_mul(y_l);
	x.wrapping_add(y.wrapping_add(xy.wrapping_add(xy)))
}

///
fn g(a: &mut u64, b: &mut u64, c: &mut u64, d: &mut u64) {
	*a = lower_mult_add(*a, *b);
	*d = (*d ^ *a).rotate_right(32);
	*c = lower_mult_add(*c, *d);
	*b = (*b ^ *c).rotate_right(24);
	*a = lower_mult_add(*a, *b);
	*d = (*d ^ *a).rotate_right(16);
	*c = lower_mult_add(*c, *d);
	*b = (*b ^ *c).rotate_right(63);
}

///
fn permutation_p(
	v0: &mut u64,
	v1: &mut u64,
	v2: &mut u64,
	v3: &mut u64,
	v4: &mut u64,
	v5: &mut u64,
	v6: &mut u64,
	v7: &mut u64,
	v8: &mut u64,
	v9: &mut u64,
	v10: &mut u64,
	v11: &mut u64,
	v12: &mut u64,
	v13: &mut u64,
	v14: &mut u64,
	v15: &mut u64,
) {
	g(v0, v4, v8, v12);
	g(v1, v5, v9, v13);
	g(v2, v6, v10, v14);
	g(v3, v7, v11, v15);
	g(v0, v5, v10, v15);
	g(v1, v6, v11, v12);
	g(v2, v7, v8, v13);
	g(v3, v4, v9, v14);
}

/// H0 as defined in the specification.
fn initial_hash(
	lanes: u32,
	hash_length: u32,
	memory_kib: u32,
	passes: u32,
	p: &[u8],
	s: &[u8],
	k: &[u8],
	x: &[u8],
) -> [u8; 72] {
	// We save additional 8 bytes in H0 for when the first two block are processed.
	// So that this may contain two little-endian integers.
	let mut h_0 = [0u8; 72];
	let mut hasher = Blake2b::new(None, BLAKE2B_OUTSIZE).unwrap();

	// Collect the first part to reduce times we update the hasher state.
	let mut first: [u8; 28] = [0u8; 28];
	first[0..4].copy_from_slice(&lanes.to_le_bytes());
	first[4..8].copy_from_slice(&hash_length.to_le_bytes());
	first[8..12].copy_from_slice(&memory_kib.to_le_bytes());
	first[12..16].copy_from_slice(&passes.to_le_bytes());
	first[16..20].copy_from_slice(&ARGON2_VERSION.to_le_bytes());
	first[20..24].copy_from_slice(&ARGON2_VARIANT.to_le_bytes());
	first[24..28].copy_from_slice(&(p.len() as u32).to_le_bytes());

	hasher.update(&first).unwrap();
	hasher.update(p).unwrap();
	hasher.update(&(s.len() as u32).to_le_bytes()).unwrap();
	hasher.update(s).unwrap();
	hasher.update(&(k.len() as u32).to_le_bytes()).unwrap();
	hasher.update(k).unwrap();
	hasher.update(&(x.len() as u32).to_le_bytes()).unwrap();
	hasher.update(x).unwrap();
	h_0[0..BLAKE2B_OUTSIZE].copy_from_slice(hasher.finalize().unwrap().as_ref());

	h_0
}

/// H' as defined in the specification.
fn extended_hash(input: &[u8], dst: &mut [u8]) {
	debug_assert!(!dst.is_empty());

	let outlen = dst.len() as u32;

	if dst.len() <= BLAKE2B_OUTSIZE {
		let mut ctx = Blake2b::new(None, dst.len()).unwrap();
		ctx.update(&outlen.to_le_bytes()).unwrap();
		ctx.update(input).unwrap();
		dst.copy_from_slice(ctx.finalize().unwrap().as_ref());
	} else {
		let mut ctx = Blake2b::new(None, BLAKE2B_OUTSIZE).unwrap();
		ctx.update(&outlen.to_le_bytes()).unwrap();
		ctx.update(input).unwrap();

		let mut tmp = ctx.finalize().unwrap();
		dst[..BLAKE2B_OUTSIZE].copy_from_slice(tmp.as_ref());

		let mut pos = BLAKE2B_OUTSIZE / 2;
		let mut toproduce = dst.len() - BLAKE2B_OUTSIZE / 2;

		while toproduce > BLAKE2B_OUTSIZE {
			ctx.reset(None).unwrap();
			ctx.update(tmp.as_ref()).unwrap();
			tmp = ctx.finalize().unwrap();

			dst[pos..(pos + BLAKE2B_OUTSIZE)].copy_from_slice(tmp.as_ref());
			pos += BLAKE2B_OUTSIZE / 2;
			toproduce -= BLAKE2B_OUTSIZE / 2;
		}

		ctx.reset(None).unwrap();
		ctx.update(tmp.as_ref()).unwrap();
		tmp = ctx.finalize().unwrap();
		dst[pos..outlen as usize].copy_from_slice(tmp.as_ref());
	}
}

#[rustfmt::skip]
///
fn fill_block(w: &mut [u64]) {
	
	let mut v0:  u64; let mut v1:  u64; let mut v2:  u64; let mut v3:  u64;
	let mut v4:  u64; let mut v5:  u64; let mut v6:  u64; let mut v7:  u64; 
	let mut v8:  u64; let mut v9:  u64; let mut v10: u64; let mut v11: u64;
	let mut v12: u64; let mut v13: u64; let mut v14: u64; let mut v15: u64;

	let mut idx = 0;
	
	// Operate on columns.
	while idx < 128 {
		v0  = w[idx      ]; v1  = w[idx +  1]; v2  = w[idx +  2]; v3  = w[idx +  3];
		v4  = w[idx +   4]; v5  = w[idx +  5]; v6  = w[idx +  6]; v7  = w[idx +  7];
		v8  = w[idx +   8]; v9  = w[idx +  9]; v10 = w[idx + 10]; v11 = w[idx + 11];
		v12 = w[idx +  12]; v13 = w[idx + 13]; v14 = w[idx + 14]; v15 = w[idx + 15];

		permutation_p(
			&mut v0,  &mut v1,  &mut v2,  &mut v3, 
			&mut v4,  &mut v5,  &mut v6,  &mut v7, 
			&mut v8,  &mut v9,  &mut v10, &mut v11, 
			&mut v12, &mut v13, &mut v14, &mut v15
		);

		w[idx     ] =  v0; w[idx +  1] =  v1; w[idx +  2] =  v2; w[idx +  3] =  v3;
		w[idx +  4] =  v4; w[idx +  5] =  v5; w[idx +  6] =  v6; w[idx +  7] =  v7;
		w[idx +  8] =  v8; w[idx +  9] =  v9; w[idx + 10] = v10; w[idx + 11] = v11;
		w[idx + 12] = v12; w[idx + 13] = v13; w[idx + 14] = v14; w[idx + 15] = v15;

		idx += 16;
	}

	idx = 0;
	// Operate on rows.
	while idx < 16 {
		v0  = w[idx     ]; v1  = w[idx +  1]; v2  = w[idx +  16]; v3  = w[idx +  17];
		v4  = w[idx + 32]; v5  = w[idx + 33]; v6  = w[idx +  48]; v7  = w[idx +  49];
		v8  = w[idx + 64]; v9  = w[idx + 65]; v10 = w[idx +  80]; v11 = w[idx +  81];
		v12 = w[idx + 96]; v13 = w[idx + 97]; v14 = w[idx + 112]; v15 = w[idx + 113];

		permutation_p(
			&mut v0,  &mut v1,  &mut v2,  &mut v3, 
			&mut v4,  &mut v5,  &mut v6,  &mut v7, 
			&mut v8,  &mut v9,  &mut v10, &mut v11, 
			&mut v12, &mut v13, &mut v14, &mut v15
		);

		w[idx     ] =  v0; w[idx +  1] =  v1; w[idx +  16] =  v2; w[idx +  17] =  v3;
		w[idx + 32] =  v4; w[idx + 33] =  v5; w[idx +  48] =  v6; w[idx +  49] =  v7;
		w[idx + 64] =  v8; w[idx + 65] =  v9; w[idx +  80] = v10; w[idx +  81] = v11;
		w[idx + 96] = v12; w[idx + 97] = v13; w[idx + 112] = v14; w[idx + 113] = v15;

		idx += 2;
	}
}

///
pub fn g_two(block: &[u64], out: &mut [u64]) {
	let mut working_block = [0u64; 128];
	working_block.copy_from_slice(block);
	fill_block(&mut working_block);

	for (el_out, &el_src) in working_block.iter_mut().zip(block.iter()) {
		*el_out ^= el_src;
	}

	let mut tmp_block = [0u64; 128];
	tmp_block.copy_from_slice(&working_block);

	fill_block(&mut working_block);

	// `out` = Z ^ R
	for (el_out, (el_z, el_tmp)) in out
		.iter_mut()
		.zip(working_block.iter().zip(tmp_block.iter()))
	{
		*el_out = el_z ^ el_tmp;
	}
}

///
pub struct Argon2i {
	working_block: [u64; 128],
	passes: u32,
	lanes: u32,
	kib: u32,
	lane_len: u32,
}

impl Argon2i {
	///
	pub fn new(passes: u32, kib: u32) -> Self {
		let lanes = 1; // 0x00ffffff < lanes && lanes > 1 == TRUE
		if passes < 1 {
			panic!();
		}
		if (kib as u64) < 8 * lanes as u64 {
			panic!();
		}
		let lane_len = kib / (4 * lanes) * 4;

		Self {
			working_block: [0u64; 128],
			passes,
			lanes,
			kib,
			lane_len,
		}
	}

	#[cfg(test)]
	///
	pub fn new_test() -> Self {
		let lanes = 1;
		let lane_len = 8 / (4 * lanes) * 4;

		Self {
			working_block: [0u64; 128],
			passes: 0,
			lanes: 1,
			kib: 8,
			lane_len,
		}
	}

	///
	pub fn g_xor(&mut self, block_x: &[u64], block_y: &[u64], out: &mut [u64]) {
		// R = X ^ Y
		for idx in 0..128 {
			self.working_block[idx] = block_x[idx] ^ block_y[idx];
			out[idx] ^= self.working_block[idx];
		}

		fill_block(&mut self.working_block);

		// `out` = Z ^ R
		for (el_out, el_z) in out.iter_mut().zip(self.working_block.iter()) {
			*el_out ^= el_z;
		}
	}
}

#[test]
fn g_test() {
	let mut w0: u64 = 15555726891008754466;
	let mut w1: u64 = 5510367530937399982;
	let mut w2: u64 = 11481008432838211339;
	let mut w3: u64 = 8667059981748828325;

	let r0: u64 = 12666226408741176632;
	let r1: u64 = 839899491230516963;
	let r2: u64 = 17298398443694995777;
	let r3: u64 = 10383764314571024184;

	g(&mut w0, &mut w1, &mut w2, &mut w3);

	assert_eq!(w0, r0);
	assert_eq!(w1, r1);
	assert_eq!(w2, r2);
	assert_eq!(w3, r3);
}

#[test]
fn p_test() {
	let mut v0: u64 = 862185360016812330;
	let mut v1: u64 = 9264562855185177247;
	let mut v2: u64 = 17733520444968542606;
	let mut v3: u64 = 13219822890422175473;
	let mut v4: u64 = 6801067205434763034;
	let mut v5: u64 = 10578543507696639262;
	let mut v6: u64 = 10108704228654865903;
	let mut v7: u64 = 2299791359568756431;
	let mut v8: u64 = 15201093463674093404;
	let mut v9: u64 = 13723714563716750079;
	let mut v10: u64 = 9719717710557384967;
	let mut v11: u64 = 1845563056782807427;
	let mut v12: u64 = 1829242492466781631;
	let mut v13: u64 = 17659944659119723559;
	let mut v14: u64 = 14852831888916040100;
	let mut v15: u64 = 12286853237524317048;

	let r0: u64 = 560590257705063197;
	let r1: u64 = 9520578903939690713;
	let r2: u64 = 3436672759520932446;
	let r3: u64 = 14405027955696943046;
	let r4: u64 = 17277966793721620420;
	let r5: u64 = 3246848157586690114;
	let r6: u64 = 13237761561989265024;
	let r7: u64 = 9829692378347117758;
	let r8: u64 = 1155007077473720963;
	let r9: u64 = 10252695060491707233;
	let r10: u64 = 10189249967016125740;
	let r11: u64 = 14693238843422479195;
	let r12: u64 = 13413025648622208818;
	let r13: u64 = 16791374424966705294;
	let r14: u64 = 11596653054387906253;
	let r15: u64 = 12616166200637387407;

	permutation_p(
		&mut v0, &mut v1, &mut v2, &mut v3, &mut v4, &mut v5, &mut v6, &mut v7, &mut v8, &mut v9,
		&mut v10, &mut v11, &mut v12, &mut v13, &mut v14, &mut v15,
	);

	assert_eq!(v0, r0);
	assert_eq!(v1, r1);
	assert_eq!(v2, r2);
	assert_eq!(v3, r3);
	assert_eq!(v4, r4);
	assert_eq!(v5, r5);
	assert_eq!(v6, r6);
	assert_eq!(v7, r7);
	assert_eq!(v8, r8);
	assert_eq!(v9, r9);
	assert_eq!(v10, r10);
	assert_eq!(v11, r11);
	assert_eq!(v12, r12);
	assert_eq!(v13, r13);
	assert_eq!(v14, r14);
	assert_eq!(v15, r15);
}

#[test]
fn tmp_test() {
	let x: [u64; 128] = [
		13326333269176112458,
		11312111829706236525,
		6702492207975363045,
		10432554322997263390,
		17563327594083905252,
		363708422295839571,
		15447393260877262514,
		12322577990331174072,
		6461571257214709801,
		5403946731436544927,
		9487451990965447237,
		14231913244783731825,
		11189487583086724302,
		2156048142759305137,
		517695234835874760,
		11319652959037050801,
		1682285863517283565,
		3137084778175413679,
		8437197477921477823,
		12869801552528859531,
		9347794403898553074,
		9953637131688056264,
		16668779229989010465,
		13682805111787394122,
		1499980969536764059,
		9689387412562167407,
		12689333657153272174,
		4110945518493930088,
		10069539297881845144,
		300603067088917781,
		2474292203984409621,
		9756833169854810940,
		2866446442152455990,
		2591310155065152621,
		18260340318502308008,
		7445209999706681223,
		17244851607610374267,
		18411453426163804127,
		16128065671880856288,
		2298416916471732637,
		16831056605149182258,
		5852260317459732886,
		1130944620463923769,
		15163982232751943235,
		4053816870259829601,
		18166240089398903715,
		4542589524230982163,
		13531107717741006020,
		17402418787826760251,
		11233959121797867529,
		9671189497378965355,
		13786973159461074206,
		1097911704117290550,
		12408091809043220743,
		10388607844711990077,
		363544629150836254,
		17801538048526686574,
		987086148462877068,
		1438580858355015844,
		14569859748848319431,
		13011588857516263760,
		17022610192726414531,
		10795241177496288528,
		1165556545470309171,
		3076846903987236399,
		12945602241138461490,
		6447233064724444088,
		7820723054826331573,
		4554264129672602004,
		16804578021987601243,
		18409254244903522408,
		16781492044312835155,
		8924047629342496526,
		9664875313470284119,
		9900653103267211502,
		4115863144404695958,
		2053206651441351030,
		13152622168087325566,
		7403797694146277939,
		10484809855810261297,
		18030718768222336004,
		4255072762973634886,
		268184789420549767,
		12818833272694835060,
		17193947899097261791,
		8823750524523336178,
		13935461596132199983,
		11959917810644863953,
		3243660301403081306,
		14627997702559362798,
		7258547458389717429,
		8769556103359504603,
		10092358661723474944,
		13664510511011048782,
		8691603403372648594,
		28987733127938773,
		156298613107249438,
		8770979507183455583,
		16334358021936476631,
		13936903226597739152,
		5467505838138232179,
		14473746813621449385,
		5013609165298476257,
		8314179192762739916,
		13418517051517439266,
		14144294807364677264,
		4243293392384089690,
		13467997306447192384,
		15313381124721379686,
		10813492726864684672,
		8553361739069621589,
		14433477536950708297,
		13396004056538284488,
		11757896909690972832,
		2244311432149504557,
		13122452283110256389,
		17125071094017648614,
		8828181847396024886,
		12164258728913127426,
		16410189605841153918,
		17349678987608014404,
		16582075612357546796,
		6991309072115243709,
		10867553470039324920,
		14115184434712534336,
		4920410384215161155,
		5744443619995775900,
		17563232565436687530,
	];

	let y: [u64; 128] = [
		6564913802781080219,
		4553049345986506976,
		14655161935114396760,
		4343033898071924876,
		9318574754399844263,
		4911552545736403503,
		12939132226109066498,
		7868318656835824555,
		1623012162441712304,
		5002501595793187529,
		13911671020321110418,
		2474807852688029688,
		4602827202043165233,
		10644301103824972684,
		7108204576322566456,
		11377469390656583708,
		8790808538989299810,
		14098067078760026861,
		622775492503167160,
		3974423121771540354,
		14071037454953646165,
		16311198413149022931,
		3860387685517762414,
		4324427556307378433,
		6717380389990296445,
		18023310388376709737,
		4423420013308183079,
		5500337921089858234,
		13344936400310026192,
		12208413587740644465,
		15796628290077378237,
		2666203818559487510,
		15067603146298744268,
		6730825221868551771,
		9107892739457374210,
		8742285006530010931,
		2619384739305427984,
		10694907127102031467,
		3393982443701531319,
		4137836810795582728,
		6781348240751406802,
		4400821054820858076,
		9443518093489745461,
		8809317043347834489,
		15746878344260122167,
		633870128589229289,
		14672782962619952400,
		9249192207775714692,
		7198917532066356507,
		5736879538166432842,
		3322303199870686643,
		10798688085121436448,
		2161347493360153345,
		10558918675314086947,
		11512068443384629068,
		18045051246422157109,
		10158374099639576193,
		14319688542499564025,
		14144335027062731535,
		5526105675917888027,
		8327721316882685919,
		15137392106825105505,
		14674019084965828657,
		12744290579695319537,
		16602556791181802695,
		3736941190140174549,
		5758384947957051879,
		12729382966021632998,
		4916176745174278953,
		5494681559084767285,
		13339124849921229916,
		14038350659451047534,
		6526829068993062746,
		17031868173561279585,
		374386618505300292,
		10288584443669810670,
		8832122959607248434,
		13926009754690394497,
		879485286148211298,
		16441712184691985878,
		9420470134084258918,
		7171092007842896395,
		155439387339252303,
		1416832397075998920,
		11771384913030358801,
		4078715258717659495,
		142357360848101843,
		17396836962807017479,
		2164978156106274196,
		13723334183752034402,
		17323922588957981466,
		5247298842799723959,
		10970994171621301600,
		13128290025320604727,
		10372725553469691804,
		11949643243210971724,
		16586794643311974211,
		8934096376884370379,
		14529367380811367033,
		55960704232305208,
		6368010726185428150,
		7818879562028102558,
		16971549165037937702,
		7016874298007204726,
		6850293899238000483,
		12064060346798997305,
		1458556428064876414,
		10374614127385049194,
		12500389693060053780,
		8884929138318457040,
		3526951439614489553,
		6227004814136614521,
		137461912495877276,
		3852936330436858507,
		6078567737986834977,
		1429275431822889754,
		16886111758735826960,
		10050017471356996069,
		4455487869225740330,
		833113579341257942,
		14010489739680568867,
		10785134700299694634,
		7687047566285095944,
		11792149411003498834,
		7450836261463975974,
		8202481391690734412,
		10714047657466758501,
		8447246657233547197,
	];

	let mut z: [u64; 128] = [
		2540676595396629577,
		13989675143318283729,
		10803635285213936381,
		9207825887579931325,
		3529078630860414633,
		13432308858582067498,
		10178104202428939133,
		3573497421011846769,
		14908131819558809296,
		1733970646229983898,
		5835669175522179301,
		7802403365754904541,
		16645455727288195872,
		16004078794026537949,
		196316764690693327,
		11808225557882800575,
		86741332668474763,
		2049651693181687606,
		14562134886299624793,
		15969225351936066485,
		10202341787160314353,
		11823872828627193313,
		9125395135533105657,
		4116058656598560833,
		8590490499229270143,
		3232986112868910001,
		8385289894611353139,
		4731052544261181197,
		1490800584149683608,
		5118950233833910686,
		13334532861385964579,
		6304115107815460204,
		89300443572758068,
		3246066217185565137,
		10147695731746573213,
		7482583208795146473,
		6717916283817915896,
		9004664379786423509,
		17851811265682636045,
		3192152906931659252,
		5407711365296530198,
		5546973237798313968,
		3292773769637212263,
		2315430872869696128,
		10634974815256479460,
		14261761334649978930,
		1754659926665023155,
		14873850958833494734,
		5358631660543037609,
		6904072171954174978,
		4809931047691059329,
		8160995855348830063,
		10805305670353214370,
		10717901705684672830,
		6879841758399407389,
		14904986248674271292,
		14390762912011172508,
		2127954070967346187,
		13187384684161786401,
		13965032797868284085,
		6631582777051954683,
		2526285170585633347,
		11177257291293326856,
		2953203013242080766,
		5040343099726055687,
		6567721725603723787,
		17586554049307072022,
		6285159996998986090,
		17999504839088308408,
		4883229681430392591,
		17978506182673103542,
		14725023768348314997,
		10920560629442657131,
		7793871686731517414,
		11827966324470573544,
		5002045113432543417,
		10577355747130441763,
		17818811014557368122,
		7978309985562016615,
		6678703924065218009,
		14432565795385355381,
		16885520141921664400,
		1035596061840758784,
		4688919443717955696,
		12663426378897780557,
		12336382509271776735,
		9972457632042131723,
		5950079844866710315,
		8254352810756329267,
		13780563271848563107,
		4011648776601636625,
		1071881049005996770,
		7201015766710107934,
		17407229336485780997,
		11215751311106758639,
		8662020056629937237,
		5177435759064196955,
		2003609176250961149,
		7092891380508030082,
		9160573815507590228,
		4491247068182506241,
		16051219150728128399,
		17846993695798101936,
		7258830660085165453,
		5074923152130039770,
		1759280479493642534,
		6885774185811183982,
		11528004113877863523,
		7911919314917512847,
		6247839065019881627,
		17207975571992264293,
		970255976273927089,
		1521147320359369459,
		7275101525286389439,
		13138823310680644798,
		974100473676453721,
		7362915948971683753,
		14621956317523626145,
		11046082480287680967,
		377596721248587713,
		12874478677934204849,
		6748764531189205551,
		3469720068953281174,
		6963634274731658846,
		2072516980022093967,
		8891470971745500596,
		12468140831255236174,
		5201897137035611747,
	];
	let mut state = Argon2i::new_test();
	state.g_xor(&x, &y, &mut z);
	let expected_z: [u64; 128] = [
		8711509446536774719,
		4558293160878454046,
		18378041270980997972,
		2559652764582915723,
		8609238717857346258,
		10512771194719250537,
		15524701035234926932,
		11741952774748559316,
		3294220536234939977,
		14229833223515510897,
		11970987007499635236,
		9584827120830611512,
		2651403302958942575,
		18223363638567662235,
		1999212538370172043,
		3360098045500785974,
		5744027514718453384,
		2297439581548615740,
		17051808803077091955,
		7970694903040290829,
		10752244785048635800,
		10101641940660914460,
		8353931021826459102,
		11044955577848124638,
		5215734790597344816,
		2966329114190236662,
		13385794768447951368,
		14596133208457193562,
		3134746712401113616,
		9612596855929567476,
		13221412333762042339,
		536604771129589298,
		6039602780649030688,
		18364932227350238129,
		12197828830541057663,
		14871158654084450554,
		10439190133431639073,
		5565776052617699445,
		17538257379089470482,
		5691441983362402832,
		10408866059422893126,
		17616236925944108648,
		13084417814169235646,
		15955865795174283765,
		18119471876924548806,
		13646205559613176861,
		10541054299635760670,
		9260690480334010906,
		5125601289645964540,
		5713216864203383136,
		3618506425293141343,
		9401426981055846014,
		9328523217789600225,
		7050688710797038652,
		17449984488275917271,
		4799768295670478946,
		247743606784948788,
		13902725325051569114,
		6514656896596419728,
		4960350542611418102,
		22954480206648126,
		12720124277713056094,
		16894569751821345897,
		9427147992744221721,
		6143509828103419139,
		1932542205401898637,
		13567076643371165575,
		6522917072052921337,
		10984168744457944025,
		12418268260935084656,
		11759457465554837377,
		12858919693039805790,
		8534478931495215455,
		1867606472245846502,
		2415015294416357878,
		1232450326633718475,
		18375626710307180425,
		18278573654333480427,
		15237502065482400509,
		1150388028633258087,
		12893903171718391891,
		8635017137997026587,
		12865943247079909240,
		2035182813340071683,
		5410348478419479776,
		12926778345618782771,
		7284509032185220989,
		772933573921968,
		14261802500924174396,
		10380907364406963264,
		10890297863021021064,
		17672362879312978727,
		4087967272458557252,
		4501209179985505650,
		10572363376261425074,
		3914229343435793358,
		5981762860397363742,
		14598347915543258756,
		2820976039725770737,
		10579245242504562394,
		13059418582265516614,
		168087587544086727,
		8771000697806902589,
		861931165961322273,
		13083048992877404784,
		9421363933193345044,
		4090367423578845909,
		8288274626965773877,
		13424577527685927512,
		13618195335969460125,
		14930592908980729291,
		4678975992603489830,
		12343147433320218583,
		14332794630087381308,
		5524577550073535391,
		10244797360592795196,
		12456192615990287677,
		3210751134692774065,
		1063288498637641938,
		10566492492392066540,
		12393062819785102507,
		10779847447470443879,
		5309022093622417972,
		64920310341929822,
		12268142546252288915,
		1878968575601374663,
		9129471816934146969,
		1442793325967585442,
	];

	assert!(z.as_ref() == expected_z.as_ref());
}
